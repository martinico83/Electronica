CCS PCM C Compiler, Version 5.110P, 62724               22-jun.-23 08:49

               Filename:   C:\Users\El_fi\OneDrive\Escritorio\Electronica\PIC\CCS-Gestion_de_puertos\Gestion_de_puertos.lst

               ROM used:   29 words (0%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... // DIRECTIVAS
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #fuses xt, nowdt
.................... #use delay(clock=4M)
.................... 
.................... // REGISTROS A DEFINIR
.................... 
....................   //PUERTO B
....................    #byte TRISB=0x86
....................    #byte PORTB=0x06
....................    
....................    // PUERTO C - RC5
....................    #bit TRISC_RC5=0x87.5
....................    #bit PORTC_RC5=0x07.5
....................    
.................... // Programa principal
.................... void main(){
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  BSF    03.5
0008:  BSF    1F.0
0009:  BSF    1F.1
000A:  BSF    1F.2
000B:  BCF    1F.3
000C:  MOVLW  07
000D:  MOVWF  1C
000E:  BCF    03.7
.................... // Configuracion de perifericos
....................    // Configuracion de las GPIOs
....................    TRISB=0x00;
000F:  CLRF   06
....................    PORTB=0x00;
0010:  BCF    03.5
0011:  CLRF   06
....................    
....................    TRISC_RC5=1;
0012:  BSF    03.5
0013:  BSF    07.5
....................    
....................    // BUCLE INFINITO
....................    while(1){
....................    if(PORTC_RC5==0)
0014:  BCF    03.5
0015:  BTFSC  07.5
0016:  GOTO   01A
....................    //if(bit_test(PORT,5)==0)
....................    //Podriamos utilizar esta funcion si hubiesemos declarado el registro PORTC
....................    {
....................    PORTB=0xFF;
0017:  MOVLW  FF
0018:  MOVWF  06
....................    }
0019:  GOTO   01B
....................    else{
....................    PORTB=0x00;
001A:  CLRF   06
....................    }
001B:  GOTO   015
....................    }
.................... }
....................    
001C:  SLEEP
....................    
....................    

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
